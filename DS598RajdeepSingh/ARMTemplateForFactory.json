{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DS598RajdeepSingh"
		},
		"Data_Lake_Storage_LinkedService_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Data_Lake_Storage_LinkedService'"
		},
		"Github_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'Github'"
		},
		"HTTP_Open_Weather_API_AirPollution_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'HTTP_Open_Weather_API_AirPollution'"
		},
		"Open_Weather_API_Weather_Data_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Open_Weather_API_Weather_Data'"
		},
		"Data_Lake_Storage_LinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rajdeepsinghstorage.dfs.core.windows.net/"
		},
		"Github_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "rs1ngh13"
		},
		"HTTP_Open_Weather_API_AirPollution_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": " http://api.openweathermap.org/ "
		},
		"HTTP_Open_Weather_API_AirPollution_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "rsingh13@bu.edu"
		},
		"Key_Vault_LinkedService_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://DS598-Homework-Vault.vault.azure.net/"
		},
		"Open_Weather_API_Weather_Data_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": " https://history.openweathermap.org/"
		},
		"Open_Weather_API_Weather_Data_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "rsingh13@bu.edu"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Ingest_Bronze_AirPollution_API')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_Historical_AirPollutionData",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://ds598-homework-vault.vault.azure.net/secrets/Open-Weather-API-Key?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Copy Air Pollution Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get_Historical_AirPollutionData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Json4",
								"type": "DatasetReference",
								"parameters": {
									"start": "@div(sub(ticks(addDays(utcNow(), -366)), ticks('1970-01-01T00:00:00Z')), 10000000)",
									"end": "@div(sub(ticks(addDays(utcNow(), -1)), ticks('1970-01-01T00:00:00Z')), 10000000)",
									"appid": {
										"value": "@activity('Get_Historical_AirPollutionData').output.value",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json4')]",
				"[concat(variables('factoryId'), '/datasets/Json3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ingest_Bronze_OpenWeather_API')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_OpenWeather_API_Key",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://ds598-homework-vault.vault.azure.net/secrets/Open-Weather-API-Key?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_OpenWeather_API_Key",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, 53)",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy Historical Weather Data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"maxConcurrentConnections": 0,
												"copyBehavior": "FlattenHierarchy"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "RestResource1",
											"type": "DatasetReference",
											"parameters": {
												"lat": 42.3601,
												"lon": -71.0589,
												"start": {
													"value": "@div(sub(ticks(addDays(utcNow(), mul(item(), -7))), ticks('1970-01-01T00:00:00Z')), 10000000)\n",
													"type": "Expression"
												},
												"end": {
													"value": "@div(sub(ticks(addDays(utcNow(), add(mul(item(), -7), 7))), ticks('1970-01-01T00:00:00Z')), 10000000)",
													"type": "Expression"
												},
												"dataType": "hour",
												"appid": {
													"value": "@activity('Get_OpenWeather_API_Key').output.value",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/Json1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data_Lake_Storage_LinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "WeatherData",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data_Lake_Storage_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data_Lake_Storage_LinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "AirPollutionData",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data_Lake_Storage_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data_Lake_Storage_LinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "AirPollutionData",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data_Lake_Storage_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HTTP_Open_Weather_API_AirPollution",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"start": {
						"type": "string"
					},
					"end": {
						"type": "string"
					},
					"appid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/air_pollution/history?lat=42.3601&lon=71.0589&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HTTP_Open_Weather_API_AirPollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Open_Weather_API_Weather_Data",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "float"
					},
					"lon": {
						"type": "float"
					},
					"start": {
						"type": "string"
					},
					"end": {
						"type": "string"
					},
					"dataType": {
						"type": "string"
					},
					"appid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&type=@{dataset().dataType}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Open_Weather_API_Weather_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Open_Weather_API_Weather_Data",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "float"
					},
					"lon": {
						"type": "float"
					},
					"start": {
						"type": "string"
					},
					"end": {
						"type": "string"
					},
					"appid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "data/2.5/air_pollution/history?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Open_Weather_API_Weather_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data_Lake_Storage_LinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Data_Lake_Storage_LinkedService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Data_Lake_Storage_LinkedService_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Github')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('Github_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('Github_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDlDNDFCOEYzLTAyRjctNDkxMC1CQzc2LUM1Nzg2Mjg3QzhFRl9lYWExMWZlNy1mYzExLTQ2ZjAtOTdkNS1hNDMzNjliMmZlZDkiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HTTP_Open_Weather_API_AirPollution')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HTTP_Open_Weather_API_AirPollution_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('HTTP_Open_Weather_API_AirPollution_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('HTTP_Open_Weather_API_AirPollution_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Key_Vault_LinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Key_Vault_LinkedService_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Open_Weather_API_Weather_Data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Open_Weather_API_Weather_Data_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('Open_Weather_API_Weather_Data_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Open_Weather_API_Weather_Data_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weather Data Preprocessing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Stream_WeatherData",
								"type": "DatasetReference"
							},
							"name": "StreamWeatherData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "WeatherData",
								"type": "DatasetReference"
							},
							"name": "toSilver"
						}
					],
					"transformations": [
						{
							"name": "AssignSourceColumns"
						},
						{
							"name": "CorrectedTimestampAndLocation"
						},
						{
							"name": "FilterCriticalColumn"
						},
						{
							"name": "ProperConversions"
						},
						{
							"name": "AddKelvinToTemp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          message as string,",
						"          cod as string,",
						"          city_id as integer,",
						"          calctime as double,",
						"          cnt as integer,",
						"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer, gust as double), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['*.json']) ~> StreamWeatherData",
						"StreamWeatherData foldDown(unroll(),",
						"     mapColumn(",
						"          calctime,",
						"          city_id,",
						"          cnt,",
						"          cod,",
						"          message,",
						"          clouds_all = list.clouds.all,",
						"          timestamp = list.dt,",
						"          feels_like = list.main.feels_like,",
						"          humidity = list.main.humidity,",
						"          pressure = list.main.pressure,",
						"          temp = list.main.temp,",
						"          temp_max = list.main.temp_max,",
						"          temp_min = list.main.temp_min,",
						"          weather_description = list.weather.description,",
						"          weather_icon = list.weather.icon,",
						"          weather_id = list.weather.id,",
						"          weather_main = list.weather.main,",
						"          wind_deg = list.wind.deg,",
						"          wind_gust = list.wind.gust,",
						"          wind_speed = list.wind.speed",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> AssignSourceColumns",
						"AssignSourceColumns derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null()))",
						"",
						",",
						"          location = 'Boston') ~> CorrectedTimestampAndLocation",
						"CorrectedTimestampAndLocation filter(!isNull(temp) && !isNull(humidity) && !isNull(timestamp)",
						") ~> FilterCriticalColumn",
						"FilterCriticalColumn derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp_C = round(temp - 273.15, 2),",
						"          temp_min_C = round(temp_min - 273.15, 2),",
						"          temp_max_C = round(temp_max - 273.15, 2),",
						"          feels_like_C = round(feels_like - 273.15, 2),",
						"          temp_min_F = round((temp_min - 273.15) * 9/5 + 32, 2),",
						"          temp_max_F = round((temp_max - 273.15) * 9/5 + 32, 2),",
						"          feels_like_F = round((temp_max - 273.15) * 9/5 + 32, 2),",
						"          lon = -71.0589,",
						"          lat = 42.3601,",
						"          weather_id_value = toInteger(split(toString(weather_id), ': ')[1])",
						",",
						"          weather_main_value = split(weather_main, ': ')[1],",
						"          weather_description_value = split(weather_description, ': ')[1],",
						"          weather_icon_value = split(weather_icon, ': ')[1]) ~> ProperConversions",
						"ProperConversions select(mapColumn(",
						"          feels_like_K = feels_like,",
						"          temp_K = temp,",
						"          temp_max_K = temp_max,",
						"          temp_min_K = temp_min",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AddKelvinToTemp",
						"AddKelvinToTemp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> toSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Stream_WeatherData')]",
				"[concat(variables('factoryId'), '/datasets/WeatherData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Stream_WeatherData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data_Lake_Storage_LinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "WeatherData",
						"fileSystem": "bronze"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											},
											"gust": {
												"type": "number"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data_Lake_Storage_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/to_Silver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data_Lake_Storage_LinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "silver"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data_Lake_Storage_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data_Lake_Storage_LinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data_Lake_Storage_LinkedService')]"
			]
		}
	]
}